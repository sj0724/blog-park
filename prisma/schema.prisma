generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id             String          @id @default(cuid())
  name           String?
  email          String?         @unique
  image          String?
  introduction   String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  password       String
  accounts       Account[]
  alarms         Alarm[]
  comments       Comment[]
  followers      Follow[]        @relation("UserFollowers")
  follows        Follow[]        @relation("UserFollows")
  likes          Like[]
  posts          Post[]
  sessions       Session[]
  temporaryPosts TemporaryPost[]

  @@map("users")
}

model Post {
  id          String    @id @default(cuid())
  title       String
  content     String
  summation   String
  userId      String    @map("user_id")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  isPublished Boolean   @default(false)
  comments    Comment[]
  likes       Like[]
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("posts")
}

model TemporaryPost {
  id        String   @id @default(cuid())
  title     String
  content   String
  userId    String   @map("user_id")
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("temporary_posts")
}

model Alarm {
  id      String  @id @default(cuid())
  userId  String  @map("user_id")
  content String
  isRead  Boolean @default(false)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("alarms")
}

model Like {
  id     String @id @default(cuid())
  userId String @map("user_id")
  postId String @map("post_id")
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@map("likes")
}

model Comment {
  id      String @id @default(cuid())
  content String
  postId  String @map("post_id")
  userId  String @map("user_id")
  post    Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model Follow {
  id          String @id @default(cuid())
  followerId  String
  followingId String
  follower    User   @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  following   User   @relation("UserFollows", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@map("follows")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
